name: Unit Tests with Allure Report

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'lab3/code/**'
  push:
    branches: [ main, develop ]
    paths:
      - 'lab3/code/**'

jobs:
  run-unit-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image with Allure
      run: docker build -t bd-unit-tests-allure .

    - name: Run tests and generate Allure results
      run: |
        mkdir -p allure-results
        docker run --rm -v $(pwd)/allure-results:/allure-results bd-unit-tests-allure

    - name: Generate Allure report
      run: |
        # Устанавливаем Allure CLI
        sudo apt-get update
        sudo apt-get install -y default-jre
        curl -o allure-2.27.0.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
        tar -zxvf allure-2.27.0.tgz
        ./allure-2.27.0/bin/allure generate allure-results -o allure-report --clean

    - name: Upload Allure report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: allure-report/
        retention-days: 7

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: allure-results/
        retention-days: 7

    - name: Create test results summary
      uses: actions/github-script@v7
      if: always() && github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          let passed = 0;
          let failed = 0;
          let skipped = 0;
          
          try {
            const resultsPath = 'allure-results/test_results.trx';
            if (fs.existsSync(resultsPath)) {
              const data = fs.readFileSync(resultsPath, 'utf8');
              const passedMatch = data.match(/passed="(\d+)"/);
              const failedMatch = data.match(/failed="(\d+)"/);
              const skippedMatch = data.match(/skipped="(\d+)"/);
              
              passed = passedMatch ? parseInt(passedMatch[1]) : 0;
              failed = failedMatch ? parseInt(failedMatch[1]) : 0;
              skipped = skippedMatch ? parseInt(skippedMatch[1]) : 0;
            }
          } catch (e) {
            console.log('Error parsing test results:', e);
          }
          
          const total = passed + failed + skipped;
          const successRate = total > 0 ? Math.round((passed / total) * 100) : 0;
          
          const message = `## 📊 Allure Test Report
          
          **Results for this PR:**
          ✅ **Passed:** ${passed}
          ❌ **Failed:** ${failed}
          ⏩ **Skipped:** ${skipped}
          📈 **Success rate:** ${successRate}%
          
          ### 📁 Artifacts
          - [Download Allure Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [View Raw Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          *Report generated automatically*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });